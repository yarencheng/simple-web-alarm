{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Footer","Layout","Content","App","props","context","interval","youtube","createRef","updateTime","bind","onTimeChange","onEnableChange","onYouTubeChange","state","nowMoment","moment","time","cookies","get","parseInt","undefined","enabled","youtubeId","isPlaying","autoplay","set","this","setInterval","clearInterval","now","setState","shouldPlay","window","location","reload","hours","minutes","seconds","timeString","valueOf","e","target","checked","value","style","height","textAlign","justify","Title","level","format","padding","onChange","defaultChecked","defaultValue","margin","Text","placeholder","opts","playerVars","ref","videoId","onPlay","onPause","onEnd","type","icon","GithubOutlined","href","React","Component","withCookies","Boolean","hostname","match","ReactDOM","render","StrictMode","CookiesProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77e43416.chunk.js","sourcesContent":["import './App.css';\nimport 'antd/dist/antd.css';\nimport React, { createRef } from 'react';\nimport { Typography, Row, Col, Button, Layout, TimePicker, Checkbox, Input } from 'antd';\nimport moment from 'moment';\nimport { GithubOutlined } from '@ant-design/icons';\nimport { withCookies, Cookies } from 'react-cookie';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport YouTube from 'react-youtube';\nconst { Footer, Content } = Layout;\n\ninterface IProps {\n  cookies: Cookies,\n}\n\ninterface IState {\n  nowMoment?: moment.Moment,\n  time?: moment.Moment,\n  enabled?: boolean,\n  youtubeId?: string,\n  isPlaying?: boolean,\n  autoplay?: boolean,\n}\n\nclass App extends React.Component<IProps, IState> {\n\n  interval: NodeJS.Timeout | undefined;\n  private youtube = createRef<YouTube>()\n\n  constructor(props: any, context: any) {\n    super(props, context);\n\n    this.updateTime = this.updateTime.bind(this);\n    this.onTimeChange = this.onTimeChange.bind(this);\n    this.onEnableChange = this.onEnableChange.bind(this);\n    this.onYouTubeChange = this.onYouTubeChange.bind(this);\n\n    this.state = {\n      nowMoment: moment(),\n      time: this.props.cookies.get('time') ? moment(parseInt(this.props.cookies.get('time'))) : undefined,\n      enabled: this.props.cookies.get('enabled') === 'true',\n      youtubeId: this.props.cookies.get('youtubeId') ? this.props.cookies.get('youtubeId') : '2g811Eo7K8U',\n      isPlaying: false,\n      autoplay: this.props.cookies.get('autoplay') === 'true',\n    }\n\n    this.props.cookies.set('autoplay', false)\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(this.updateTime, 200)\n  }\n\n  componentWillUnmount() {\n    if (this.interval) {\n      clearInterval(this.interval)\n    }\n  }\n\n  updateTime() {\n\n    let now = moment()\n\n    this.setState({\n      nowMoment: now,\n    })\n\n    if (this.shouldPlay(now)) {\n      this.props.cookies.set('autoplay', true)\n      window.location.reload(false);\n    }\n  }\n\n  shouldPlay(now: moment.Moment) : boolean {\n    if (!this.state.enabled) {\n      return false\n    }\n\n    if (\n      now.hours() !== this.state.time?.hours() ||\n      now.minutes() !== this.state.time?.minutes() ||\n      now.seconds() !== this.state.time?.seconds()\n    ) {\n      return false\n    }\n\n    if (this.state.isPlaying) {\n      return false\n    }\n\n    return true\n  }\n\n  onTimeChange(time: moment.Moment | null, timeString: string) {\n    this.setState({\n      time: time ? time : undefined,\n    })\n    this.props.cookies.set('time', time?.valueOf())\n  }\n\n  onEnableChange(e: CheckboxChangeEvent) {\n    this.setState({\n      enabled: e.target.checked,\n    })\n    this.props.cookies.set('enabled', e.target.checked)\n  }\n\n  onYouTubeChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({\n      youtubeId: e.target.value,\n    })\n    this.props.cookies.set('youtubeId', e.target.value)\n  }\n\n  render() {\n\n    return (\n      <Layout\n        style={{\n          height: '100vh',\n          textAlign: 'center',\n        }}\n      >\n        <Content>\n          <Row\n            justify='center'\n          >\n            <Col>\n              <Typography.Title level={4}>Simple Web Alarm</Typography.Title>\n            </Col>\n          </Row>\n\n          <Row\n            justify='center'\n            style={{\n              textAlign: 'center',\n            }}\n          >\n            <Col >\n              <Typography.Title level={1}>{this.state.nowMoment?.format('HH')}</Typography.Title>\n            </Col>\n            <Col >\n              <Typography.Title level={1}>:</Typography.Title>\n            </Col>\n            <Col >\n              <Typography.Title level={1}>{this.state.nowMoment?.format('mm')}</Typography.Title>\n            </Col>\n            <Col >\n              <Typography.Title level={1}>:</Typography.Title>\n            </Col>\n            <Col >\n              <Typography.Title level={1}>{this.state.nowMoment?.format('ss')}</Typography.Title>\n            </Col>\n          </Row>\n\n          <Row justify='center' style={{ padding: 10 }}>\n            <Col>\n              <Checkbox\n                onChange={this.onEnableChange}\n                defaultChecked={this.state.enabled}\n              >\n                Enabled\n              </Checkbox>\n            </Col>\n          </Row>\n\n          <Row justify='center' style={{ padding: 10 }}>\n            <Col>\n              <TimePicker\n                onChange={this.onTimeChange}\n                defaultValue={this.state.time}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' style={{ padding: 10 }}>\n            <Col\n              style={{\n                margin: 'auto 0%'\n              }}\n            >\n              <Typography.Text>https://www.youtube.com/watch?v=</Typography.Text>\n            </Col>\n            <Col>\n              <Input\n                placeholder=\"Youtube ID\"\n                defaultValue={this.state.youtubeId}\n                onChange={this.onYouTubeChange}\n              />\n            </Col>\n          </Row>\n\n          <Row justify='center' style={{ padding: 10 }}>\n            <Col>\n              <YouTube\n                opts={{\n                  playerVars: {\n                    autoplay: this.state.autoplay ? 1 : 0,\n                  }\n                }}\n                ref={this.youtube}\n                videoId={this.state.youtubeId}\n                onPlay={() => { this.setState({ isPlaying: true }) }}\n                onPause={() => { this.setState({ isPlaying: false }) }}\n                onEnd={() => { this.setState({ isPlaying: false }) }}\n              />\n            </Col>\n          </Row>\n\n        </Content>\n        <Footer>\n          <Button\n            type=\"link\"\n            icon={<GithubOutlined />}\n            href='https://github.com/yarencheng/simple-web-alarm'\n          >\n            yarencheng/simple-web-alarm\n          </Button>\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <App />\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}